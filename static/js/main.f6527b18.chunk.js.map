{"version":3,"sources":["components/ColorSwatch/index.js","components/utilities/index.js","App.js","index.js"],"names":["ColorSwatch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setEditable","setState","editing","state","updateColor","color","hex","handleClose","displayColorPicker","colorLabel","concat","parseInt","Math","random","react_default","a","createElement","className","style","backgroundColor","onClick","tabIndex","htmlFor","label","position","zIndex","top","right","bottom","left","usePicker","lib","onChange","name","id","disabled","readOnly","value","React","Component","defaultProps","hexToRGB","hexColor","charAt","substring","length","toUpperCase","match","map","mixColors","color1","color2","weight","a1","a2","weight2","rgbCombined","e","i","_ref","_ref2","slicedToArray","b","round","colorPart","hexValue","toString","join","App","setPrimaryColor","primaryColor","setGrayColor","index","lastState","grays","setOpacity","opacity","target","addGray","toConsumableArray","_this2","computedGrays","item","role","aria-labelledby","href","float","components_ColorSwatch","key","for","type","min","max","step","width","class","textAlign","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f6527b18.chunk.js","sourcesContent":["import React from 'react';\nimport { ChromePicker } from 'react-color';\n\nclass ColorSwatch extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\t\t\n\t\t\n\t\tthis.state = {\n\t\t\tediting: false\n\t\t};\n\t}\n\tsetEditable = () => {\n\t\tthis.setState({\"editing\":!this.state.editing});\n\t}\n\n\tupdateColor = (color) => {\n\t\tthis.props.updateColor(color.hex);\n\t}\n\n\thandleClose = () => {\n    \tthis.setState({ displayColorPicker: false })\n  \t}\n\n\trender() {\n\t\tconst popover = {\n\t\t\tposition: 'absolute',\n\t\t\tzIndex: '2',\n\t\t}\n\t\tconst cover = {\n\t\t\tposition: 'fixed',\n\t\t\ttop: '0px',\n\t\t\tright: '0px',\n\t\t\tbottom: '0px',\n\t\t\tleft: '0px',\n\t\t}\n\t\tconst colorLabel = `color${parseInt(Math.random()*10000)}`;\n\n\t  return (\n\t\t  <div className=\"color-swatch\" style={ { backgroundColor : this.props.color } } onClick={ this.setEditable } tabIndex=\"0\">\n\t        <label htmlFor={colorLabel} className=\"screen-reader-text\">\n\t          { this.props.label }\n\t        </label>\n\t        {\n\t        \tthis.state.editing &&\n\t        \t<div style={ popover }>\n          \t\t\t<div style={ cover } onClick={ this.handleClose }/>\n          \t\t\t{ \n          \t\t\t\tthis.props.usePicker &&\n          \t\t\t\t<ChromePicker color={ this.props.color } onChange={ this.updateColor } />\n          \t\t\t}\n          \t\t</div>\n\t        }\n\t        <input name={colorLabel} id={colorLabel} disabled readOnly value={ this.props.color } className=\"color-swatch-input\" />\n\t      </div>\n\t  )\n\t}\n}\n\n\nColorSwatch.defaultProps = {\n  usePicker: true\n};\n\nexport default ColorSwatch;\n\t","// Expands a 3 digit hex to it's six digit equivalent\nexport function expandHexCode(shortCode) {\n\tif(shortCode.charAt(0) === \"#\"){\n\t\tshortCode = shortCode.substring(1,shortCode.length);\n\t}\n\tconst hexArray = shortCode.toUpperCase().split('');\n\treturn hexArray[0]+hexArray[0]+hexArray[1]+hexArray[1]+hexArray[2]+hexArray[2];\n}\n\n// Take in a hex sting and convert it to an array of [r,g,b]\nexport function hexToRGB(hexColor){\n\tif(hexColor.charAt(0) === \"#\"){\n\t\thexColor = hexColor.substring(1,hexColor.length);\n\t}\n\thexColor = hexColor.toUpperCase();\n\treturn hexColor.match(/[0-9A-F]{2}/g).map((color) => (\n\t\tparseInt(color,16)\n\t));\n}\n\n// Take in a rgb array and convert it to a hex string\nexport function RGBToHex( rgbColor ){\n\tconst hexArray = rgbColor.map( ( colorPart ) => {\n\t\tconst hexValue = colorPart.toString(16);\n\t\treturn (hexValue.length === 1 ? '0' + hexValue : hexValue);\n\t});\n\treturn hexArray.join('').toUpperCase();\n}\n\n// Combine two arrays so you end up with a single array of arrays\n// [A,B,C] and [1,2,3] will result in [[A,1],[B,2],[C,3]]\nexport function zipArrays(a1,a2){\n\treturn a1.map(( e , i ) => (\n\t\t[a1[i],a2[i]]\n\t));\n}\n\n//Take two colors and a weight and return a single color\nexport function mixColors( color1, color2, weight ) {\n\tconst weight2 = 1 - weight;\n\n\tconst rgbCombined = zipArrays( hexToRGB( color1 ), hexToRGB( color2 ) ).map( ( [ a, b] ) => (\n\t\tMath.round( a * weight + b * weight2 )\n\t) );\n\treturn RGBToHex(rgbCombined);\n}","import React, { Component } from 'react';\nimport './App.css';\nimport ColorSwatch from './components/ColorSwatch';\nimport { RGBToHex, mixColors } from './components/utilities';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      primaryColor: '#0a8441',\n      grays: ['#FEFEFE','#666666','#232323'],\n      opacity: 0.05\n    };\n  }\n\n  setPrimaryColor = (hexColor) => {\n    this.setState({primaryColor:hexColor});\n  }\n\n  setGrayColor = (hexColor,index) => {\n    let lastState = this.state.grays;\n    lastState[index] = hexColor;\n\n    this.setState({grays:lastState});\n  }\n\n  setOpacity = (e) => {\n    this.setState({opacity:e.target.value})\n  }\n\n  addGray = () => {\n    this.setState({grays:[...this.state.grays, `#${mixColors('#000000', this.state.grays[ this.state.grays.length-1 ], .3 )}` ] } );\n  }\n\n  render() {\n    const computedGrays = this.state.grays.map((item,index) => (\n      '#'+mixColors( this.state.primaryColor, item, this.state.opacity )\n    ));\n    return (\n      <div className=\"app\" role=\"main\" aria-labelledby=\"mainlbl\">\n        <a href=\"https://github.com/brentswisher/gray-harmonizer\" className=\"button button-github\" style={{float:'right',backgroundColor:this.state.primaryColor} } >View on Github</a>\n        <h1 id=\"mainlbl\">\n          Easy Gray Harmonizer\n        </h1>\n        <section style={ {backgroundColor:computedGrays[0]}} aria-labelledby=\"section1lbl\">\n          <h2 id=\"section1lbl\">Step 1: Pick a Color</h2>\n          <p>\n            Select the color you would like to harmonize your grays with.\n          </p>\n\n          <ColorSwatch label=\"Primary Color\" color={ this.state.primaryColor } updateColor={ this.setPrimaryColor }/>\n        </section>\n        \n       <section className=\"grays\" style={{backgroundColor:computedGrays[0]}} aria-labelledby=\"section2lbl\">\n          <h2 id=\"section2lbl\">Step 2: Pick Your Gray(s)</h2>\n          <p>\n            Add the shades of gray you want to use.\n          </p>\n          <div className=\"swatch-holder\">\n            {\n              this.state.grays.map((item,index) => (\n                <ColorSwatch label={`Gray ${index+1}`} color={ item } key={ index } updateColor= { ( color ) => this.setGrayColor( color, index ) } />\n              ))\n\n            }\n          </div>\n          <button className=\"button\" style={{backgroundColor:this.state.primaryColor} } onClick={ this.addGray }>\n            Add another gray\n          </button>\n        </section>\n        \n        <section style={{backgroundColor:computedGrays[0]}} aria-labelledby=\"section3lbl\">\n          <h2 id=\"section3lbl\">Step 3: Select Opacity</h2>\n          <p>\n            <label for=\"opacity\">\n              Select your main color opacity.\n            </label>\n          </p>\n          { parseInt(this.state.opacity * 100) }%\n          <input type=\"range\" name=\"opacity\" id=\"opacity\" min=\"0\" max=\"1\" step=\".01\" value={ this.state.opacity } onChange={ this.setOpacity } style={{width:'100%'}}/>\n        </section>\n        \n        <section class=\"pallet\" aria-labelledby=\"section4lbl\">\n          <h2 id=\"section4lbl\" className=\"pallet-title\" style={{textAlign:'center',color:this.state.grays[0],backgroundColor:this.state.grays[computedGrays.length-1]}}>\n            Original Pallet\n          </h2>\n          <hr />\n           <div className=\"swatch-holder\">\n            <ColorSwatch label=\"Primary Color\" color={ this.state.primaryColor } usePicker={ false } />\n            {\n              this.state.grays.map( ( item, index ) => (\n                <ColorSwatch label={`Original Gray ${index+1}`} color={ item } key={ index } usePicker={ false } />\n              ))\n            }\n            \n          </div>\n          <hr />\n          <div className=\"swatch-holder\">\n            <ColorSwatch label=\"Primary Color\" color={ this.state.primaryColor } usePicker={ false } />\n            {\n              computedGrays.map( ( item, index ) => (\n                <ColorSwatch label={`Computed Gray ${index+1}`} color={ item } key={ index } usePicker={ false } />\n              ))\n            }\n            \n          </div>\n          <hr />\n          <h2 className=\"pallet-title\" style={{textAlign:'center',color:computedGrays[0],backgroundColor:computedGrays[computedGrays.length-1]}}>\n            Harmonized Pallet\n          </h2>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}